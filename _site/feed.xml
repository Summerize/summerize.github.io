<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-10-16T11:33:59+02:00</updated><id>/</id><title>Summerize</title><subtitle>Garder le contact</subtitle><entry><title>Android, le passage d’arguments</title><link href="/ios-android-parallels-arguments/" rel="alternate" type="text/html" title="Android, le passage d&#39;arguments" /><published>2017-06-08T00:00:00+02:00</published><updated>2017-06-08T00:00:00+02:00</updated><id>/ios-android-parallels-arguments</id><content type="html" xml:base="/ios-android-parallels-arguments/">&lt;h2 id=&quot;prrequis&quot;&gt;Prérequis&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Connaitre iOS et vouloir comprendre Android&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pourquoi-comprendre-android&quot;&gt;Pourquoi comprendre Android&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Vous ne ferez pas que de l’iOS toute votre vie, donc restez curieux&lt;/li&gt;
  &lt;li&gt;Pour travailler efficacement avec les autres plateformes (vous avez surement des soucis commun, pourquoi ne pas les solutionner ensemble … mais pour ça il faut se comprendre)&lt;/li&gt;
  &lt;li&gt;Android est une plateforme importante (80% du marché) et elle est devenue mature&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ios-beaucoup-de-libert&quot;&gt;iOS, beaucoup de liberté&lt;/h2&gt;

&lt;h2 id=&quot;android&quot;&gt;Android&lt;/h2&gt;
&lt;p&gt;### Activity, intent.putExtra
Le lancement d’une nouvelle activité passe par la création d’un Intent.
On configure un &lt;code class=&quot;highlighter-rouge&quot;&gt;Intent&lt;/code&gt;, qui va préparer l’activité.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContactProfileActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONTACT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Au moment du &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreate&lt;/code&gt; on pourra récupérer &lt;strong&gt;la valeur&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIntExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONTACT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Avantages&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;inconvénients&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C’est facile&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Pour des données simples&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;activity-busput&quot;&gt;Activity, Bus.put&lt;/h3&gt;
&lt;p&gt;A la création de l’intent, on va garder un pointeur vers l’objet que l’on passe en paramètre. (C’est l’équivalent d’un [associated object sur iOS] (https://developer.apple.com/documentation/objectivec/1418509-objc_setassociatedobject)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContactProfileActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BUS_FULL_CONTACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Au moment du &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreate&lt;/code&gt; on pourra récupérer ce &lt;strong&gt;pointeur&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BUS_FULL_CONTACT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Avantages&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;inconvénients&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Pas besoin de serialiser l’objet&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Attention à la gestion mémoire et ne pas oublié libérer les pointeurs&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;fragment-setarguments&quot;&gt;Fragment, setArguments&lt;/h3&gt;

&lt;p&gt;Le fragment expose publiquement des méthodes pour l’instancier. On lui passe des paramètres et le système fait le reste.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DetailsFragment&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DetailsFragment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DetailsFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Avantages&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;inconvénients&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Le système est capable de décider la reconstruction du fragment, il passera par le constructeur vide mais les arguments seront encore là, ouf !&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;fragment-directement-par-un-setter-&quot;&gt;Fragment, directement par un setter !&lt;/h3&gt;
&lt;p&gt;On instancie un fragment et on le configure après …&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DetailsFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refreshIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// reload the fragment, invalidate the adapter or whatever&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Avantages&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;inconvénients&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C’est une bonne idée de pouvoir rafraîchir un fragment&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Perte des données si le système décide de reconstruire le fragment&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;et-sur-ios-&quot;&gt;Et sur iOS ?&lt;/h3&gt;
&lt;p&gt;On fait ce que l’on veut car on utilise les références des &lt;code class=&quot;highlighter-rouge&quot;&gt;viewControllers&lt;/code&gt; et le système ne désalloue pas les instances si facilement.&lt;/p&gt;

&lt;p&gt;Il y a tout de même quelques conseils :
1. Utiliser les &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Initialization/Initialization.html&quot;&gt;DESIGNATED_INITIALIZER&lt;/a&gt; si vous ne connaissez pas, demandez vous ce que va appeler &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; dans cet example&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MonObjet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MonObjet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ou en Swift … vous le sentirez passer car le compilateur vérifie :)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Faites vos propres DESIGNATED_INITIALIZER pour expliquer les paramètres obligatoires ou non.&lt;/li&gt;
&lt;/ol&gt;</content><category term="iOS" /><category term="Android" /><category term="iOS &lt;3 Android" /><category term="Android &lt;3 iOS" /><summary>Android, le passage d&#39;arguments</summary></entry><entry><title>UIViewController = Activity et/ou Fragment</title><link href="/ios-android-parallels-viewcontrollers-fragments-activity/" rel="alternate" type="text/html" title="UIViewController = Activity et/ou Fragment" /><published>2017-06-08T00:00:00+02:00</published><updated>2017-06-08T00:00:00+02:00</updated><id>/ios-android-parallels-viewcontrollers-fragments-activity</id><content type="html" xml:base="/ios-android-parallels-viewcontrollers-fragments-activity/">&lt;h2 id=&quot;prrequis&quot;&gt;Prérequis&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Connaitre iOS et vouloir comprendre Android&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pourquoi-comprendre-android&quot;&gt;Pourquoi comprendre Android&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Vous ne ferez pas que de l’iOS toute votre vie, donc restez curieux&lt;/li&gt;
  &lt;li&gt;Pour travailler efficacement avec les autres plateformes (vous avez surement des soucis communs, pourquoi ne pas les solutionner ensemble … mais pour ça il faut se comprendre)&lt;/li&gt;
  &lt;li&gt;Android est une plateforme importante (80% du marché mobile) et elle est devenue mature&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;uiviewcontroller-activity-fragment&quot;&gt;UIViewController, Activity, Fragment&lt;/h2&gt;
&lt;p&gt;Sur iOS, Android, le design pattern le plus commun est le &lt;strong&gt;MVC&lt;/strong&gt; (Model View Controller).
+ &lt;strong&gt;Model&lt;/strong&gt; : les données de base que vous gérées.
+ &lt;strong&gt;View&lt;/strong&gt; : une représentation visuelle de l’écran.
+ &lt;strong&gt;Controller&lt;/strong&gt; : un object qui va gérer les événements qui se produisent sur la vue et les répercuter sur le modèle.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;iOS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Android&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;UIView&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;View&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Controller&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;UIViewController&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Activity, Fragment&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;ios--uiviewcontroller&quot;&gt;iOS : UIViewController&lt;/h3&gt;
&lt;p&gt;Depuis la sortie du l’environnement de développement, (iPhone OS 1, Mars 2008), les UIViewControllers sont disponibles.
En 2010, sort l’iPad 1.
Les applications iPhone et iPad doivent (logiquement) partager une grosse partie des concepts graphiques. Pour ce faire, nous pouvons gérer de la composition, c’est à dire réutiliser plusieurs UIViewControllers d’iPhone pour composer un écran d’iPad.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parentViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;childController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parentViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addChildViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parentViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didMoveToParentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UIViewControler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parentViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UIViewControler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parentViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addChildViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didMoveToParentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Ce qu’il faut retenir, c’est que c’est au développeur de se débrouiller pour construire et réutiliser ses briques.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;complexit-&quot;&gt;Complexité ?&lt;/h4&gt;
&lt;p&gt;Avec la complexité grandissante des applications, il est devenu important de pouvoir découper son écran en plusieurs views/controlleurs plus petits.
Apple nous laisse la liberté de faire ce que l’on veut.&lt;/p&gt;

&lt;h4 id=&quot;android--activity-et-fragments&quot;&gt;Android : Activity et fragments&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://developer.android.com/images/fundamentals/fragments.png&quot; alt=&quot;Google-fundamentals-fragments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sur Android c’est différent, Google a fait le choix à notre place et impose 2 composants.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Les &lt;strong&gt;activités&lt;/strong&gt; sont la depuis le début et on peut se dire qu’ &lt;strong&gt;un écran = une activité&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Les &lt;strong&gt;fragments&lt;/strong&gt; sont arrivés avec les premières tablettes Android, le 22 février 2011. (Android 3.0, API level 11, Honeycomb).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’idée étant de proposer un choix pour mutualiser son code et réutiliser un maximum de chose entre les interfaces.&lt;/p&gt;

&lt;p&gt;Alors faut-il utiliser les fragments ou les activités ?
Question piège, il faut utiliser les deux, en connaissant les limitations de chacun :
- Un fragment doit être dans un activité
- Un fragment ne peut pas présenter une activité (pas de startActivity)
- Un fragment n’a pas besoin d’être déclaré dans le manifest (!!)
- ViewPager : fragments !
- Pour une mutualisation smartphone tablettes : fragments !&lt;/p&gt;</content><category term="iOS" /><category term="Android" /><category term="iOS &lt;3 Android" /><category term="Android &lt;3 iOS" /><category term="UIViewControler" /><category term="Fragment" /><category term="Activity" /><summary>UIViewController = Activity et/ou Fragment</summary></entry><entry><title>Comment debugger une ‘callkit’ extension</title><link href="/callkit/" rel="alternate" type="text/html" title="Comment debugger une &#39;callkit&#39; extension" /><published>2017-01-06T00:00:00+01:00</published><updated>2017-01-06T00:00:00+01:00</updated><id>/callkit</id><content type="html" xml:base="/callkit/">&lt;p&gt;&lt;img src=&quot;/images/callkit.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;center&gt;Aujourd&#39;hui on vous explique comment nous avons procéder pour faire fonctionner un &lt;b&gt;identifieur d&#39;appel sur iOS via une callkit extension&lt;/b&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;prrequis&quot;&gt;Prérequis&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Connaître la notion d’extension&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.raywenderlich.com/150015/callkit-tutorial-ios&quot;&gt;Avoir déjà créé son extension CallKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;activer-votre-extension&quot;&gt;Activer votre extension&lt;/h3&gt;
&lt;p&gt;Ce point peut paraître simple, mais beaucoup ignore qu’une extension à besoin d’être installée manuellement par l’utilisateur !
Par consequent, allez dans les réglages de votre téléphone, puis entrée Téléphone, et enfin Bloquage d’appels et identification.
Vous activer alors votre application !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/callkit-settings.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;comprendre-le-format-dacceptation-des-numros-de-tlphone&quot;&gt;Comprendre le format d’acceptation des numéros de téléphone&lt;/h3&gt;

&lt;p&gt;Comme vous avez pu le voir, afin de spécifier les numéros que vous voulez identifier, il est nécessaire d’implémenter la méthode suivante dans votre extension :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;private func addIdentificationPhoneNumbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to context: CXCallDirectoryExtensionContext&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; throws &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La documentation vous demande alors de fournir une liste de tuple contenant :&lt;br /&gt;
- Le numéro à identifier&lt;br /&gt;
- Le label associé qui sera affiché&lt;br /&gt;
Attention, comme indiqué, cette liste doit-être triée par numéro de téléphone, et ceux-ci on un format bien spécifique :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;public typealias CXCallDirectoryPhoneNumber &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Int64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pour ma part, j’ai choisit de mettre ces numéros sous le format suivant :
number.countryCode + number.nationnalNumber
par exemple, en france ou le code pays est 33, on peut avoir un numéro sous la forme&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;33610101010&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Une fois sous le bon format, n’oubliez pas de &lt;b&gt;trier votre liste avant de la soumettre !&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;var sortedContacts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;String, CXCallDirectoryPhoneNumber&lt;span class=&quot;o&quot;&gt;)]()&lt;/span&gt;
....

sortedContacts.sort&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;by: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;.1 &amp;gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.1 &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s, p&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;sortedContacts &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    context.addIdentificationEntry&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;withNextSequentialPhoneNumber: p, label: s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;et-maintenant-on-teste-&quot;&gt;Et maintenant, on teste !&lt;/h3&gt;

&lt;p&gt;Vous trouverez tout un tas d’articles expliquant comment lancer une extension en debug, avec la notion d “attach to process”.
Le problème de notre extension est qu’elle ne possède pas d’interface graphique, par conséquent, impossible de lancer ce process en debug.
Pour les curieux, c’est par &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://easynativeextensions.com/how-to-debug-your-ios-extension/&quot;&gt;ici&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;notre-solution-la-console-&quot;&gt;Notre solution, la Console !&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/callkitConsole.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’application console d’Apple a été remise au goût du jour depuis mac OS Sierra, et le moins que l’on puisse dire c’est qu’il y a eu du changement.
Pour la première fois depuis bien longtemps, l’application devient utilisable et c’est grâce à elle que nous avons pu débloquer nos problème.
Afin de vous aider, vous pouvez utiliser la barre de filtre, afin de vous concentrer sur des recherches précises :&lt;br /&gt;
- Le nom de votre application (pour nous Summerize) &lt;br /&gt;
- Callkit &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Dans les deux cas, des informations bien différentes vont ressortir, mais elles peuvent toutes être pertinentes.&lt;/p&gt;

&lt;p&gt;Voici un exemple vous permettant de déterminer un comportement erroné :
&lt;img src=&quot;/images/callkitConsoleError.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;utilisation-des-mthodes-de-refresh&quot;&gt;Utilisation des méthodes de refresh&lt;/h3&gt;
&lt;p&gt;Un point important d’une callKit Extension est que l’on peut forcer l’appel aux methodes de délégation depuis l’application.
Nous avons donc choisit d’executer dans notre application, un comportement identique à l’extension afin de pouvoir logguer les résultats et constater d’éventuelles erreurs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;callKitExt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CXCallDirectoryManager.sharedInstance
&lt;span class=&quot;c&quot;&gt;#if DEBUG&lt;/span&gt;
    self.simulateExtensionBehaviour&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#endif&lt;/span&gt;
callKitExt.reloadExtension&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;withIdentifier: &lt;span class=&quot;s2&quot;&gt;&quot;your bundle extension identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;e &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; error &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        NSLog&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.localizedDescription&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;quelques-tips-utiles&quot;&gt;Quelques tips utiles&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Dans les réglages de votre téléphone, vous pouvez désactiver toutes les applications pouvant faire de l’identification d’appel, afin d’être la seule application à le faire, et de consacrer vos logs à votre application.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Si vous echangez des datas entre votre application et votre extension, vérifiez que vous utilisez les bons méchanismes, notamment le répertoire dédié. Une erreur de type “sandbox violation” peut-être vue dans les logs si une erreur se passe à ce niveau.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Si vous voyez les logs suivants, vous êtes sur la bonne piste !&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;default	11:56:37.939605 +0200	callservicesd	Received -[CXCallSource registerWithConfiguration:] with configuration: &amp;lt;private&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/callkit-success.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;auteur&quot;&gt;Auteur&lt;/h3&gt;
&lt;p&gt;Paul-Anatole CLAUDOT&lt;/p&gt;</content><category term="iOS" /><category term="Apple" /><category term="Extension" /><category term="CallKit" /><category term="Debug Extension" /><category term="CXCallDirectoryPhoneNumber" /><category term="Phone number formatter" /><summary>iOS CallKit Extension</summary></entry></feed>
