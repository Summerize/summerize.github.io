<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-05-19T10:36:37+02:00</updated><id>/</id><title>Summerize</title><subtitle>Garder le contact</subtitle><entry><title>Comment debugger une ‘callkit’ extension</title><link href="/callkit/" rel="alternate" type="text/html" title="Comment debugger une &#39;callkit&#39; extension" /><published>2017-01-06T00:00:00+01:00</published><updated>2017-01-06T00:00:00+01:00</updated><id>/callkit</id><content type="html" xml:base="/callkit/">&lt;p&gt;&lt;img src=&quot;/images/callkit.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;center&gt;Aujourd&#39;hui on vous explique comment nous avons procéder pour faire fonctionner un &lt;b&gt;identifieur d&#39;appel sur iOS via une callkit extension&lt;/b&gt;&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;prrequis&quot;&gt;Prérequis&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Connaître la notion d’extension&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.raywenderlich.com/150015/callkit-tutorial-ios&quot;&gt;Avoir déjà créé son extension CallKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;activer-votre-extension&quot;&gt;Activer votre extension&lt;/h3&gt;
&lt;p&gt;Ce point peut paraître simple, mais beaucoup ignore qu’une extension à besoin d’être installée manuellement par l’utilisateur !
Par consequent, allez dans les réglages de votre téléphone, puis entrée Téléphone, et enfin Bloquage d’appels et identification.
Vous activer alors votre application !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/callkit-settings.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;comprendre-le-format-dacceptation-des-numros-de-tlphone&quot;&gt;Comprendre le format d’acceptation des numéros de téléphone&lt;/h3&gt;

&lt;p&gt;Comme vous avez pu le voir, afin de spécifier les numéros que vous voulez identifier, il est nécessaire d’implémenter la méthode suivante dans votre extension :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;private func addIdentificationPhoneNumbers&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to context: CXCallDirectoryExtensionContext&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; throws &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La documentation vous demande alors de fournir une liste de tuple contenant :&lt;br /&gt;
- Le numéro à identifier&lt;br /&gt;
- Le label associé qui sera affiché&lt;br /&gt;
Attention, comme indiqué, cette liste doit-être triée par numéro de téléphone, et ceux-ci on un format bien spécifique :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;public typealias CXCallDirectoryPhoneNumber &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Int64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pour ma part, j’ai choisit de mettre ces numéros sous le format suivant :
number.countryCode + number.nationnalNumber
par exemple, en france ou le code pays est 33, on peut avoir un numéro sous la forme&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;33610101010&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Une fois sous le bon format, n’oubliez pas de &lt;b&gt;trier votre liste avant de la soumettre !&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;var sortedContacts &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;String, CXCallDirectoryPhoneNumber&lt;span class=&quot;o&quot;&gt;)]()&lt;/span&gt;
....

sortedContacts.sort&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;by: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;.1 &amp;gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.1 &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s, p&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;sortedContacts &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    context.addIdentificationEntry&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;withNextSequentialPhoneNumber: p, label: s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;et-maintenant-on-teste-&quot;&gt;Et maintenant, on teste !&lt;/h3&gt;

&lt;p&gt;Vous trouverez tout un tas d’articles expliquant comment lancer une extension en debug, avec la notion d “attach to process”.
Le problème de notre extension est qu’elle ne possède pas d’interface graphique, par conséquent, impossible de lancer ce process en debug.
Pour les curieux, c’est par &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://easynativeextensions.com/how-to-debug-your-ios-extension/&quot;&gt;ici&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;notre-solution-la-console-&quot;&gt;Notre solution, la Console !&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/callkitConsole.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’application console d’Apple a été remise au goût du jour depuis mac OS Sierra, et le moins que l’on puisse dire c’est qu’il y a eu du changement.
Pour la première fois depuis bien longtemps, l’application devient utilisable et c’est grâce à elle que nous avons pu débloquer nos problème.
Afin de vous aider, vous pouvez utiliser la barre de filtre, afin de vous concentrer sur des recherches précises :&lt;br /&gt;
- Le nom de votre application (pour nous Summerize) &lt;br /&gt;
- Callkit &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Dans les deux cas, des informations bien différentes vont ressortir, mais elles peuvent toutes être pertinentes.&lt;/p&gt;

&lt;p&gt;Voici un exemple vous permettant de déterminer un comportement erroné :
&lt;img src=&quot;/images/callkitConsoleError.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;utilisation-des-mthodes-de-refresh&quot;&gt;Utilisation des méthodes de refresh&lt;/h3&gt;
&lt;p&gt;Un point important d’une callKit Extension est que l’on peut forcer l’appel aux methodes de délégation depuis l’application.
Nous avons donc choisit d’executer dans notre application, un comportement identique à l’extension afin de pouvoir logguer les résultats et constater d’éventuelles erreurs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;callKitExt &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CXCallDirectoryManager.sharedInstance
&lt;span class=&quot;c&quot;&gt;#if DEBUG&lt;/span&gt;
    self.simulateExtensionBehaviour&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#endif&lt;/span&gt;
callKitExt.reloadExtension&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;withIdentifier: &lt;span class=&quot;s2&quot;&gt;&quot;your bundle extension identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;e &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; error &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        NSLog&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.localizedDescription&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;quelques-tips-utiles&quot;&gt;Quelques tips utiles&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Dans les réglages de votre téléphone, vous pouvez désactiver toutes les applications pouvant faire de l’identification d’appel, afin d’être la seule application à le faire, et de consacrer vos logs à votre application.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Si vous echangez des datas entre votre application et votre extension, vérifiez que vous utilisez les bons méchanismes, notamment le répertoire dédié. Une erreur de type “sandbox violation” peut-être vue dans les logs si une erreur se passe à ce niveau.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Si vous voyez les logs suivants, vous êtes sur la bonne piste !&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;default	11:56:37.939605 +0200	callservicesd	Received -[CXCallSource registerWithConfiguration:] with configuration: &amp;lt;private&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/callkit-success.png&quot; alt=&quot;CallKit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;auteur&quot;&gt;Auteur&lt;/h3&gt;
&lt;p&gt;Paul-Anatole CLAUDOT&lt;/p&gt;</content><category term="iOS" /><category term="Apple" /><category term="Extension" /><category term="CallKit" /><category term="Debug Extension" /><category term="CXCallDirectoryPhoneNumber" /><category term="Phone number formatter" /><summary>iOS CallKit Extension</summary></entry></feed>
